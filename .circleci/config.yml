# Use the latest 2.1 version of CircleCI pipeline process engine. 
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  build-and-test:
    # These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # Be sure to update the Docker image tag below to openjdk version of your application.
    # A list of available CircleCI Docker Convenience Images are available here: https://circleci.com/developer/images/image/cimg/openjdk
    docker:
      #- image: cimg/openjdk:11.0
      - image: circleci/openjdk:11.0
    environment:
      TAG: $CIRCLE_BUILD_NUM

    steps:
      # Checkout the code as the first step.
      - checkout
      # Use mvn clean and package as the standard maven build phase
      - restore_cache:
          keys:
            - v1-spring-boot-test-{{ checksum "pom.xml" }}
            - v1-spring-boot-test-
      - run:
          name: Build
          command: mvn -B -DskipTests clean package
      # Then run your tests!
      - run:
          name: Test
          command: mvn test
      #- run: mvn dependency:go-offline
      - setup_remote_docker:
          version: 19.03.13

      - run:
          name: Build and push Docker image
          command: |
            echo "$DOCKER_PASS" | docker login --username $DOCKER_USER --password-stdin
            docker build -t $DOCKER_USER/spring-boot-docker .
            docker push $DOCKER_USER/spring-boot-docker:$TAG
      - save_cache:
          key: v1-spring-boot-test-{{ checksum "pom.xml" }}
          paths:
            - ~/.m2

workflows:
  # Below is the definition of your workflow.
  # Inside the workflow, you provide the jobs you want to run, e.g this workflow runs the build-and-test job above.
  # CircleCI will run this workflow on every commit.
  # For more details on extending your workflow, see the configuration docs: https://circleci.com/docs/2.0/configuration-reference/#workflows
  sample:
  #  triggers:
   #   - schedule:
    #      cron: '0 */2 * * *'
     #     filters:
      #      branches:
       #       only: master
    jobs:
      - build-and-test
